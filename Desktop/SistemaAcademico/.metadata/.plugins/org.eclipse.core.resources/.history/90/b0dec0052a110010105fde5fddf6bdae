package XML;

import dto.Aluno;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class AlunoXMLDAO {
    private static final String FILE_PATH = "alunos.xml";

    // Método para adicionar um aluno no XML
    public boolean inserir(Aluno aluno) {
        try {
            File file = new File(FILE_PATH);
            Document doc;
            Element rootElement;

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

            // Se o arquivo XML já existe, carrega os dados
            if (file.exists()) {
                doc = dBuilder.parse(file);
                rootElement = doc.getDocumentElement();
            } else {
                // Se não existe, cria um novo
                doc = dBuilder.newDocument();
                rootElement = doc.createElement("alunos");
                doc.appendChild(rootElement);
            }

            // Criando elemento aluno
            Element alunoElement = doc.createElement("aluno");
            rootElement.appendChild(alunoElement);

            alunoElement.setAttribute("id", String.valueOf(aluno.getId_aluno()));

            addElement(doc, alunoElement, "nome", aluno.getNome());
            addElement(doc, alunoElement, "codigo", aluno.getCod());
            addElement(doc, alunoElement, "curso", aluno.getCurso().getId_curso());
            salvarArquivo(doc);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Método para excluir um aluno pelo código
    public boolean excluir(String cod) {
        try {
            File file = new File(FILE_PATH);
            if (!file.exists()) return false;

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);

            NodeList nodeList = doc.getElementsByTagName("aluno");

            for (int i = 0; i < nodeList.getLength(); i++) {
                Element alunoElement = (Element) nodeList.item(i);
                String codigo = alunoElement.getElementsByTagName("codigo").item(0).getTextContent();

                if (codigo.equals(cod)) {
                    alunoElement.getParentNode().removeChild(alunoElement);
                    salvarArquivo(doc);
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // Método para listar todos os alunos do XML
    public List<Aluno> listarTodos() {
        List<Aluno> alunos = new ArrayList<>();
        try {
            File file = new File(FILE_PATH);
            if (!file.exists()) return alunos;

            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);

            NodeList nodeList = doc.getElementsByTagName("aluno");

            for (int i = 0; i < nodeList.getLength(); i++) {
                Element alunoElement = (Element) nodeList.item(i);

                String nome = alunoElement.getElementsByTagName("nome").item(0).getTextContent();
                String codigo = alunoElement.getElementsByTagName("codigo").item(0).getTextContent();
                String curso = alunoElement.getElementsByTagName("curso").item(0).getTextContent();

                Aluno aluno = new Aluno();
                alunos.add(aluno);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return alunos;
    }

    // Método auxiliar para adicionar elementos ao XML
    private void addElement(Document doc, Element parent, String tagName, String textContent) {
        Element element = doc.createElement(tagName);
        element.appendChild(doc.createTextNode(textContent));
        parent.appendChild(element);
    }

    // Método para salvar alterações no arquivo XML
    private void salvarArquivo(Document doc) throws TransformerException {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        DOMSource domSource = new DOMSource(doc);
        StreamResult streamResult = new StreamResult(new File(FILE_PATH));
        transformer.transform(domSource, streamResult);
    }
}
